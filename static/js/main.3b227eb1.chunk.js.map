{"version":3,"sources":["firebase/index.js","component/fill-out.component.js","algorithm/calculate.js","component/show-score.component.js","component/create-team.component.js","component/nav-bar.component.js","App.js","serviceWorker.js","index.js"],"names":["firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","db","firestore","FillOut","useState","playerList","setPlayerList","rankCounter","setRankCounter","useEffect","collection","get","then","docs","forEach","doc","_","data","firstName","secondName","postData","DataRegUser","document","querySelector","playerName","value","playerKill","restPlayerKill","firstKill","secondKill","parseInt","rank","kill","prevScore","score","id","update","list","name","placeholder","map","player","onClick","e","preventDefault","ShowScore","counter","getData","orderBy","onSnapshot","snapshot","docChanges","change","console","log","type","renderData","teamList","li","createElement","teamName","className","setAttribute","textContent","appendChild","CreateTeam","createForm","set","navBar","to","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"6WAcEA,IAASC,cAXI,CACXC,OAAQ,0CACRC,WAAY,mCACZC,YAAa,0CACbC,UAAW,mBACXC,cAAe,+BACfC,kBAAmB,eACnBC,MAAO,4CACPC,cAAe,iBAKjB,IAAMC,EAAKV,IAASW,Y,MCXP,SAASC,IAAU,IAAD,EACOC,mBAAS,IADhB,mBACtBC,EADsB,KACVC,EADU,OAESF,mBAAS,GAFlB,mBAEtBG,EAFsB,KAETC,EAFS,KAI7BC,qBAAU,WACNR,EAAGS,WAAW,YAAYC,MAAMC,MAAK,SAAAC,GACjCA,EAAKC,SAAQ,SAAAC,GACT,IAAIC,EAAID,EAAIE,OACcD,EAAEE,UAAUF,EAAEG,WACxCb,GAAc,SAAAD,GAAU,4BAAQA,GAAR,CAAmBW,EAAEE,eAC7CZ,GAAc,SAAAD,GAAU,4BAAQA,GAAR,CAAmBW,EAAEG,wBAGvD,IAEF,IAAMC,EAAW,SAACL,GACd,IAAIM,EAAcC,SAASC,cAAc,aACrCC,EAAaH,EAAYG,WAAWC,MACpCC,EAAaL,EAAYK,WAAWD,MACpCE,EAAiBN,EAAYM,eAAeF,MAC5CG,EAAY,EACZC,EAAa,EAEbL,GAAcT,EAAIE,OAAOC,WACzBU,EAAYE,SAASJ,GACQ,KAA1BX,EAAIE,OAAOE,aAAmBU,EAAaC,SAASH,MAE1B,KAA1BZ,EAAIE,OAAOE,aAAmBU,EAAaC,SAASJ,IACvDE,EAAYE,SAASH,IAGzB,ICpCkBI,EAAKC,EAAKC,EDoCxBC,GCpCcH,EDoCIxB,ECpCCyB,EDoCWJ,EAAUC,ECpChBI,EDoC2BlB,EAAIE,OAAOiB,MClCtD,CAAC,EAAE,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAChDJ,SAASC,IAAuB,EAAfD,SAASE,GAASF,SAASG,IDmCnEhC,EAAGS,WAAW,YAAYK,IAAIA,EAAIoB,IAAIC,OAAO,CACzCR,UAAWA,EAAUb,EAAIE,OAAOW,UAChCC,WAAaA,EAAWd,EAAIE,OAAOY,WACnCK,MAAMA,IAIV1B,EAAeD,EADI,EACuB,GAC1Cc,EAAYG,WAAWC,MAAQ,GAC/BJ,EAAYK,WAAWD,MAAQ,GAC/BJ,EAAYM,eAAeF,MAAQ,IAmBvC,OAEI,wBAAIU,GAAG,WACH,4BACI,0BAAMA,GAAK,YACP,uCAAa5B,GACb,2BAAO8B,KAAK,aAAaC,KAAK,eAC9B,8BAAUH,GAAI,aAAaI,YAAY,eAE/BlC,EAAWmC,KAAI,SAAAC,GACX,OAAO,gCAASA,OAI5B,2BAAOH,KAAK,aAAaC,YAAY,iBACrC,2BAAOD,KAAK,iBAAiBC,YAAY,kBACzC,4BAAQG,QAhCD,SAAAC,GACnBA,EAAEC,iBACF,IACIpB,EADcF,SAASC,cAAc,aACZC,WAAWC,MACxCxB,EAAGS,WAAW,YAAYC,MAAMC,MAAK,SAAAC,GACjCA,EAAKC,SAAQ,SAAAC,GACFS,GAAcT,EAAIE,OAAOC,WACxBM,GAAcT,EAAIE,OAAOE,YACrBC,EAASL,WAwBjB,a,UEOL8B,EAtFG,WACd,IAAIC,EAAU,EAEdrC,qBAAU,WACNsC,OAGJ,IAAMA,EAAU,WAMZ9C,EAAGS,WAAW,YAAYsC,QAAQ,QAAQ,QAAQC,YAAW,SAAAC,GAC3CA,EAASC,aACfrC,SAAQ,SAAAsC,GACZC,QAAQC,IAAIF,EAAOrC,IAAIE,OAAOmC,EAAOG,MACrB,SAAbH,EAAOG,MAA8B,YAAbH,EAAOG,MAC9BC,EAAWJ,EAAOrC,YAM5ByC,EAAa,SAACzC,GAChB+B,IACA,IAAMW,EAAWnC,SAASC,cAAc,SAEpCmC,EAAKpC,SAASqC,cAAc,MAC5B5B,EAAOT,SAASqC,cAAc,QAC9BC,EAAWtC,SAASqC,cAAc,QAClCrB,EAAOhB,SAASqC,cAAc,OAC9BzC,EAAYI,SAASqC,cAAc,QACnCxC,EAAaG,SAASqC,cAAc,QACpC3B,EAAOV,SAASqC,cAAc,OAC9B/B,EAAYN,SAASqC,cAAc,QACnC9B,EAAaP,SAASqC,cAAc,QACpCzB,EAAQZ,SAASqC,cAAc,QAEnCrB,EAAKuB,UAAU,OACf7B,EAAK6B,UAAU,OACf3C,EAAU2C,UAAU,OACpB3C,EAAU2C,UAAU,YACpB1C,EAAW0C,UAAU,aACrBjC,EAAUiC,UAAU,YACpBhC,EAAWgC,UAAU,aACrB3B,EAAM2B,UAAU,QAEhBH,EAAGI,aAAa,UAAW/C,EAAIoB,IAC/BJ,EAAKgC,YAAYjB,EACjBc,EAASG,YAAYhD,EAAIoB,GACzBjB,EAAU6C,YAAYhD,EAAIE,OAAOC,UACjCC,EAAW4C,YAAYhD,EAAIE,OAAOE,WAClCS,EAAUmC,YAAYhD,EAAIE,OAAOW,UACjCC,EAAWkC,YAAYhD,EAAIE,OAAOY,WAClCK,EAAM6B,YAAYhD,EAAIE,OAAOiB,MAE7BI,EAAK0B,YAAY9C,GACjBoB,EAAK0B,YAAY7C,GACjBa,EAAKgC,YAAYpC,GACjBI,EAAKgC,YAAYnC,GAGjB6B,EAAGM,YAAYjC,GACf2B,EAAGM,YAAYJ,GACfF,EAAGM,YAAY1B,GACfoB,EAAGM,YAAYhC,GACf0B,EAAGM,YAAY9B,GAEE,OAAbuB,GAAmBA,EAASO,YAAYN,IAEhD,OACI,yBAAKG,UAAU,aACX,wBAAI1B,GAAI,QACJ,wBAAI0B,UAAU,QACV,sCACA,sCACA,sCACA,sCACA,2CChFL,SAASI,IAmBpB,OACI,0BAAM9B,GAAG,eACL,2BAAOI,YAAY,WAAWD,KAAK,aACnC,2BAAOC,YAAY,YAAYD,KAAK,cACpC,2BAAOC,YAAY,aAAaD,KAAK,eACrC,4BAAQI,QAvBK,SAACC,GAClBA,EAAEC,iBACF,IAAIsB,EAAa5C,SAASC,cAAc,gBACpCqC,EAAWM,EAAWN,SAASnC,MAC/BP,EAAYgD,EAAWhD,UAAUO,MACjCN,EAAa+C,EAAW/C,WAAWM,MACvCxB,EAAGS,WAAW,YAAYK,IAAI6C,GAAUO,IAAI,CACxCjD,UAAWA,EACXC,WAAYA,EACZS,UAAW,EACXC,WAAa,EACbK,MAAQ,IAEZgC,EAAWN,SAASnC,MAAM,GAC1ByC,EAAWhD,UAAUO,MAAM,GAC3ByC,EAAW/C,WAAWM,MAAM,KAQxB,W,MCvBG,SAAS2C,IACpB,OACI,yBAAKP,UAAU,UACX,kBAAC,IAAD,CAAMQ,GAAG,IAAIR,UAAU,eAAvB,YACA,kBAAC,IAAD,CAAMQ,GAAG,QAAQR,UAAU,eAA3B,cACA,kBAAC,IAAD,CAAMQ,GAAG,UAAUR,UAAU,eAA7B,WCaGS,MAbf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKT,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAOU,KAAK,IAAIC,OAAK,EAACC,UAAWtE,IACjC,kBAAC,IAAD,CAAOoE,KAAK,QAAQE,UAAW5B,IAC/B,kBAAC,IAAD,CAAO0B,KAAK,UAAUE,UAAWR,OCJrBS,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAAS1D,SAAS2D,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMxE,MAAK,SAAAyE,GACjCA,EAAaC,kB","file":"static/js/main.3b227eb1.chunk.js","sourcesContent":["import firebase from 'firebase/app';\r\nimport 'firebase/firestore';\r\n\r\nconst config = {\r\n    apiKey: \"AIzaSyDqTHY4zj2afSxGaPt_z9k2Rcs9YcsubcE\",\r\n    authDomain: \"pubgscorecompute.firebaseapp.com\",\r\n    databaseURL: \"https://pubgscorecompute.firebaseio.com\",\r\n    projectId: \"pubgscorecompute\",\r\n    storageBucket: \"pubgscorecompute.appspot.com\",\r\n    messagingSenderId: \"449947130172\",\r\n    appId: \"1:449947130172:web:6a4ad66df450343642e639\",\r\n    measurementId: \"G-SR0L6FPTYS\"\r\n  };\r\n\r\n  firebase.initializeApp(config);\r\n\r\n  const db = firebase.firestore();\r\n\r\n  export {\r\n    db\r\n  }\r\n","import React, {useEffect, useState} from 'react';\r\nimport { db } from '../firebase';\r\nimport './fill-out.component.css';\r\nimport {calculate} from '../algorithm/calculate';\r\n\r\nexport default function FillOut(){\r\n    const [playerList, setPlayerList] = useState([]);\r\n    const [rankCounter, setRankCounter] = useState(1);\r\n\r\n    useEffect(() => {\r\n        db.collection('TeamName').get().then(docs => {\r\n            docs.forEach(doc => {\r\n                let _ = doc.data();\r\n                let firstAndSecondName = [_.firstName,_.secondName];\r\n                setPlayerList(playerList => [...playerList,_.firstName]);\r\n                setPlayerList(playerList => [...playerList,_.secondName]);\r\n            })\r\n        });\r\n    },[]);\r\n\r\n    const postData = (doc) => {\r\n        var DataRegUser = document.querySelector('#pushData');\r\n        var playerName = DataRegUser.playerName.value;\r\n        var playerKill = DataRegUser.playerKill.value;\r\n        var restPlayerKill = DataRegUser.restPlayerKill.value;\r\n        let firstKill = 0;\r\n        let secondKill = 0;\r\n\r\n        if (playerName == doc.data().firstName){\r\n            firstKill = parseInt(playerKill);\r\n            if(doc.data().secondName !== '') secondKill = parseInt(restPlayerKill);\r\n        }else{\r\n            if(doc.data().secondName !== '') secondKill = parseInt(playerKill);\r\n            firstKill = parseInt(restPlayerKill);\r\n        }\r\n\r\n        let score = calculate(rankCounter,firstKill+secondKill,doc.data().score);\r\n       \r\n        db.collection('TeamName').doc(doc.id).update({\r\n            firstKill: firstKill+doc.data().firstKill,\r\n            secondKill : secondKill+doc.data().secondKill,\r\n            score:score\r\n        })\r\n\r\n        let numberOfTeam = 9;\r\n        setRankCounter(rankCounter%(numberOfTeam)+1);\r\n        DataRegUser.playerName.value = '';\r\n        DataRegUser.playerKill.value = '';\r\n        DataRegUser.restPlayerKill.value = '';\r\n    }\r\n\r\n    const uploadDataPubg = e => {\r\n        e.preventDefault();\r\n        var DataRegUser = document.querySelector('#pushData');\r\n        var playerName = DataRegUser.playerName.value;\r\n        db.collection('TeamName').get().then(docs => {\r\n            docs.forEach(doc => {\r\n                    if(playerName == doc.data().firstName || \r\n                        playerName == doc.data().secondName){\r\n                            postData(doc);\r\n                    }\r\n                }\r\n            )\r\n      })\r\n    }\r\n\r\n\r\n    return(\r\n        \r\n        <ul id=\"fillOut\">\r\n            <li>\r\n                <form id = 'pushData'>\r\n                    <span>Rank: {rankCounter}</span>\r\n                    <input list=\"playerName\" name='playerName'></input>\r\n                    <datalist id ='playerName' placeholder=\"Your name..\">\r\n                        {\r\n                            playerList.map(player => {\r\n                                return <option>{player}</option>\r\n                            })\r\n                        }\r\n                    </datalist>\r\n                    <input name='playerKill' placeholder=\"First kill..\"></input>\r\n                    <input name='restPlayerKill' placeholder=\"Second kill..\"></input>\r\n                    <button onClick ={uploadDataPubg}>Submit</button>\r\n                    </form>\r\n            </li>\r\n        </ul>\r\n    );\r\n}","export function calculate(rank,kill,prevScore){\r\n\r\n    let rankScore = [0,250,240,235,230,225,220,215,210,205,200,195,190,185,180,175];\r\n    let totalScore = rankScore[parseInt(rank)]+(parseInt(kill)*4)+parseInt(prevScore);\r\n    return totalScore;\r\n}","import React, { useState, useEffect, useLayoutEffect } from 'react';\r\nimport { db } from '../firebase';\r\nimport './show-score.component.css';\r\n\r\nconst ShowScore = () => {\r\n    var counter = 0;\r\n    \r\n    useEffect(() => {\r\n        getData();\r\n    });\r\n\r\n    const getData = () => {\r\n        // db.collection('TeamName').orderBy('score','desc').get().then(docs => {\r\n        //     docs.forEach(doc => {\r\n        //         renderData(doc);\r\n        //     });\r\n        // });\r\n        db.collection('TeamName').orderBy('score','desc').onSnapshot(snapshot => {\r\n            let changes = snapshot.docChanges();\r\n            changes.forEach(change => {\r\n                console.log(change.doc.data(),change.type);\r\n                if(change.type=='added' || change.type=='modified'){\r\n                    renderData(change.doc)\r\n                }\r\n            });\r\n        });\r\n    }\r\n\r\n    const renderData = (doc) => {\r\n        counter++;\r\n        const teamList = document.querySelector('#team');\r\n\r\n        let li = document.createElement('li');\r\n        let rank = document.createElement('span');\r\n        let teamName = document.createElement('span');\r\n        let name = document.createElement('div');\r\n        let firstName = document.createElement('span');\r\n        let secondName = document.createElement('span');\r\n        let kill = document.createElement('div');\r\n        let firstKill = document.createElement('span');\r\n        let secondKill = document.createElement('span');\r\n        let score = document.createElement('span');\r\n        \r\n        name.className='name';\r\n        kill.className='kill';\r\n        firstName.className='rank';\r\n        firstName.className='firstName';\r\n        secondName.className='secondName';\r\n        firstKill.className='firstKill';\r\n        secondKill.className='secondKill';\r\n        score.className='score';\r\n        \r\n        li.setAttribute('data-id', doc.id);\r\n        rank.textContent=counter;\r\n        teamName.textContent=doc.id;\r\n        firstName.textContent=doc.data().firstName;\r\n        secondName.textContent=doc.data().secondName;\r\n        firstKill.textContent=doc.data().firstKill;\r\n        secondKill.textContent=doc.data().secondKill;\r\n        score.textContent=doc.data().score;\r\n        \r\n        name.appendChild(firstName);\r\n        name.appendChild(secondName);\r\n        kill.appendChild(firstKill);\r\n        kill.appendChild(secondKill);\r\n\r\n\r\n        li.appendChild(rank);\r\n        li.appendChild(teamName);\r\n        li.appendChild(name);\r\n        li.appendChild(kill);\r\n        li.appendChild(score);\r\n\r\n        if (teamList !== null) teamList.appendChild(li);\r\n    }\r\n    return(\r\n        <div className='showScore'>\r\n            <ul id ='team'>\r\n                <li className='head'>\r\n                    <span>Rank</span>\r\n                    <span>Team</span>\r\n                    <span>Name</span>\r\n                    <span>Kill</span>\r\n                    <span>Score</span>\r\n                </li>\r\n            </ul>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default ShowScore;","import React from 'react';\r\nimport { db } from '../firebase';\r\n\r\nexport default function CreateTeam(){\r\n    const handleCreate = (e) => {\r\n        e.preventDefault();\r\n        let createForm = document.querySelector('#create-form');\r\n        let teamName = createForm.teamName.value;\r\n        let firstName = createForm.firstName.value;\r\n        let secondName = createForm.secondName.value;\r\n        db.collection('TeamName').doc(teamName).set({\r\n            firstName: firstName,\r\n            secondName: secondName,\r\n            firstKill: 0,\r\n            secondKill : 0,\r\n            score : 0\r\n        })\r\n        createForm.teamName.value='';\r\n        createForm.firstName.value='';\r\n        createForm.secondName.value='';\r\n    }\r\n\r\n    return(\r\n        <form id='create-form'>\r\n            <input placeholder='teamName' name='teamName'></input>\r\n            <input placeholder='firstName' name='firstName'></input>\r\n            <input placeholder='secondName' name='secondName'></input>\r\n            <button onClick={handleCreate}>Create</button>\r\n        </form>\r\n    );\r\n}","import React from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport './nav-bar.component.css';\r\n\r\nexport default function navBar(){\r\n    return(\r\n        <div className='navBar'>\r\n            <Link to=\"/\" className=\"navBar-Link\">Fill Out</Link>\r\n            <Link to=\"/Edit\" className=\"navBar-Link\">Show Score</Link>\r\n            <Link to=\"/Create\" className=\"navBar-Link\">Create</Link>\r\n        </div>\r\n    );\r\n}","import React from 'react';\nimport { BrowserRouter as Router, Route} from \"react-router-dom\";\nimport './App.css';\n\nimport FillOut from './component/fill-out.component';\nimport ShowScore from './component/show-score.component';\nimport CreateTeam from './component/create-team.component';\nimport NavBar from './component/nav-bar.component';\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <NavBar />\n        <Route path=\"/\" exact component={FillOut} />\n        <Route path=\"/Edit\" component={ShowScore} />\n        <Route path=\"/Create\" component={CreateTeam} />\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}